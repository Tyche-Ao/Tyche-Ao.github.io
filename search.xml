<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/Tyche-Ao/Tyche-Ao.github.io/2022/04/18/docker%E5%9F%BA%E7%A1%80/"/>
      <url>/Tyche-Ao/Tyche-Ao.github.io/2022/04/18/docker%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><img src="docker-01.png"></p><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><ol><li><p>启动服务</p><p>systemctl start docker</p></li><li><p>停止服务</p><p>systemctl stop docker</p></li><li><p>重启服务</p><p>systemctl restart docker</p></li><li><p>查看服务状态</p><p>systemctl status docker</p></li><li><p>设置开机启动服务</p><p>systemctl enable docker </p></li></ol><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><ol><li><p>查看镜像</p><p>docker images</p><p>docker images -q          查看所有镜像的id</p></li><li><p>搜索镜像</p><p>docker search 镜像名称</p></li><li><p>拉取镜像</p><p>docker pull 名称:版本</p></li><li><p>删除镜像</p><p>docker rmi 镜像id</p><p>docker rmi 版本名称:版本</p><p>docker rmi <code>docker images -q</code></p></li></ol><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><ol><li><p>查看容器</p><p>docker ps     查看正在运行的容器</p><p>docker ps -a</p></li><li><p>创建</p><p>docker run -it  –name 容器名 centos:7（镜像名） /bin/bash</p><p>-i  保持容器运行。</p><p>-t      交互式容器。 与-i一起使用。创建后自动进入容器，退出后容器关闭</p><p>-d     守护式容器。创建一个容器在后台运行。使用docker exec进入容器。退出后容器不会关闭。</p></li><li><p>进入</p><p>docker exec  -it 容器名 /bin/bash</p></li><li><p>启动</p><p>docker start 容器名</p></li><li><p>停止</p><p>docker stop 容器名</p></li><li><p>删除</p><p>docker rm  容器名/id</p></li><li><p>查看容器信息</p><p>docker inspect 容器名</p></li><li><p>容器内退出</p><p>exit    Ctrl+D</p></li></ol><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><p>宿主机当中的一个目录/文件</p><p><img src="docker-02.png"></p><h3 id="数据卷的作用"><a href="#数据卷的作用" class="headerlink" title="数据卷的作用"></a>数据卷的作用</h3><ul><li>容器数据的持久化</li><li>外部机械和容器间的通信</li><li>容器之间的数据交换</li></ul><h3 id="数据卷的创建"><a href="#数据卷的创建" class="headerlink" title="数据卷的创建"></a>数据卷的创建</h3><p>docker run -it –name 容器名 -v ~/data:/root/data_container centos:7 /bin/bash</p><p>在容器创建时用-v创建数据卷。~等于/root， 宿主机目录:容器目录  ，都必须用绝对路径，目录不存在会自动创建。</p><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><p><img src="docker-03.png"></p><p>创建数据卷容器</p><p>docker run -it –name c3  <strong>-v /volume</strong>  centos:7</p><p>将其他容器 绑定到数据卷容器上</p><p>docker run -it –name a1 <strong>–volumes-from</strong>  c3 centos:7 </p><h2 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h2><p><img src="docker-04.png"></p><h2 id="部署Mysql"><a href="#部署Mysql" class="headerlink" title="部署Mysql"></a>部署Mysql</h2><p>docker run -id \</p><p>-p 3306:3306 \</p><p>-v $PWD/conf:/etc/mysql/conf.d \</p><p>-v $PWD/logs:/logs  \</p><p>-v $PWD/data:/var/lib/mysql  \</p><p>-e MYSQL_ROOT_PASSWORD=126  \</p><p>mysql:8.0</p><ul><li>-p 表示端口映射，将容器端口映射到宿主机端口，宿主机端口：容器端口</li><li>$PWD 表示当前目录</li><li></li></ul><h2 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h2><h3 id="docker镜像原理"><a href="#docker镜像原理" class="headerlink" title="docker镜像原理"></a>docker镜像原理</h3><p>docker镜像本质是一个<strong>分成的文件系统</strong>。</p><p><img src="docker%E9%95%9C%E5%83%8F%E5%8E%9F%E7%90%86.png"></p><h3 id="docker镜像制作"><a href="#docker镜像制作" class="headerlink" title="docker镜像制作"></a>docker镜像制作</h3><ol><li><p>容器转镜像</p><p>docker commit 容器id 镜像名称：版本号</p><p>docker save -o 压缩文件名称 镜像名称：版本号</p><p>docker load -i 压缩文件名称</p></li><li><p>dockerfile</p></li></ol><p>部署springboot项目</p><ol><li>项目打包</li><li>传到linux上</li><li>编写dockerfile</li><li>docker build -f   dockerfile（目录下dockerfile名） -t app .</li><li>生成镜像</li></ol><p>docker run -id 镜像名</p><p>–name可省略，系统会取</p><p>自定义centos7镜像</p><p><img src="dockerfile%E8%87%AA%E5%AE%9A%E4%B9%89centos7.png"></p><h2 id="docker-Compose"><a href="#docker-Compose" class="headerlink" title="docker Compose"></a>docker Compose</h2><p>docker Compose 是一个编排<em><strong>多容器分布式部署</strong></em>的工具，提供命令及管理容器化的完整开发周期，包括服务的构建，启动与停止。</p><h2 id="docker-私有仓库"><a href="#docker-私有仓库" class="headerlink" title="docker 私有仓库"></a>docker 私有仓库</h2><p><img src="%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93.png"></p><p><img src="%E4%B8%8A%E4%BC%A0%E9%95%9C%E5%83%8F.png"></p><p>拉取镜像</p><p>docker pull 镜像名:版本号</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/Tyche-Ao/Tyche-Ao.github.io/2022/04/11/springBoot/"/>
      <url>/Tyche-Ao/Tyche-Ao.github.io/2022/04/11/springBoot/</url>
      
        <content type="html"><![CDATA[<p>spring缺点</p><ul><li>配置繁琐</li><li>依赖繁琐</li></ul><p>springBoot</p><ul><li>自动配置</li><li>起步依赖</li><li>辅助功能（内嵌了服务器等）</li></ul><p>springBoot快速入门</p><p><img src="C:\Users\Aoliao\AppData\Roaming\Typora\typora-user-images\image-20220331212524959.png" alt="image-20220331212524959"></p><p>配置文件优先级</p><p>resources根目录下的 application.properties &gt; application.yml &gt; application.yaml</p><h3 id="yaml语法格式"><a href="#yaml语法格式" class="headerlink" title="yaml语法格式"></a>yaml语法格式</h3><p>对空格要求及其严格</p><p>key: value     注意有空格</p><p>   对象      student: {name: chenao,age: 18}</p><p>student:        </p><p>​    name: chenao</p><p>​    age: 18</p><p>数组写法 pets: [cat,dog]</p><p>pets: </p><p>- cat</p><p>- dog</p><p>name: “string \n hello”    输出会换行</p><p>name: ‘string \n hello’    不转义转移字符，回原样输出为string \n hello</p><p>读取自定义配置文件</p><ul><li>@Value（“${}”）</li><li>@Autowired</li></ul><p>private Environment ev;</p><p>ev.getProperty(“${}”)</p><ul><li>@ConfigurationProperties(prefix=”前缀”)</li></ul><h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><p>为了完成不同环境下配置环境动态切换</p><h4 id="激活配置文件"><a href="#激活配置文件" class="headerlink" title="激活配置文件"></a>激活配置文件</h4><p>多个properties配置文件</p><p>application.properties   application-dev.properties（开发）   application-test.properties   application-pro.properties （生产）</p><p>server.profiles.active= pro</p><p>虚拟机参数（VM options）或命令行参数激活(Program arguments)</p><p><img src="C:\Users\Aoliao\AppData\Roaming\Typora\typora-user-images\image-20220401144214952.png" alt="image-20220401144214952"></p><h4 id="内部配置文件的加载顺序"><a href="#内部配置文件的加载顺序" class="headerlink" title="内部配置文件的加载顺序"></a>内部配置文件的加载顺序</h4><p><img src="C:\Users\Aoliao\AppData\Roaming\Typora\typora-user-images\image-20220401145359404.png" alt="image-20220401145359404"></p><p>java和resources目录下打包都属于classpath</p><p>即springBoot（当前项目）下的config目录下的properties&gt;当前目录下的properties&gt;moudle（springBoot-01）的resources（classpath）下的config里的properties&gt;classpath下的properties</p><h4 id="外部配置（Externalized-Configuration）文件加载顺序"><a href="#外部配置（Externalized-Configuration）文件加载顺序" class="headerlink" title="外部配置（Externalized Configuration）文件加载顺序"></a>外部配置（Externalized Configuration）文件加载顺序</h4><p><strong><img src="C:\Users\Aoliao\AppData\Roaming\Typora\typora-user-images\image-20220401153112743.png" alt="image-20220401153112743"></strong></p><h2 id="springBoot整合其他框架"><a href="#springBoot整合其他框架" class="headerlink" title="springBoot整合其他框架"></a>springBoot整合其他框架</h2><h3 id="整合junit（单元测试）"><a href="#整合junit（单元测试）" class="headerlink" title="整合junit（单元测试）"></a>整合junit（单元测试）</h3><p><img src="C:\Users\Aoliao\AppData\Roaming\Typora\typora-user-images\image-20220401153450593.png" alt="image-20220401153450593"></p><p>实例启动类为SpringBootTestApplication。当测试类包名与启动类包名不一致时需要classes=   ，包名相同时则不需要classes</p><p><img src="C:\Users\Aoliao\AppData\Roaming\Typora\typora-user-images\image-20220401153844165.png" alt="image-20220401153844165"></p><h3 id="整合redis"><a href="#整合redis" class="headerlink" title="整合redis"></a>整合redis</h3><p><img src="C:\Users\Aoliao\AppData\Roaming\Typora\typora-user-images\image-20220401154455468.png" alt="image-20220401154455468"></p><h3 id="整合mybatis"><a href="#整合mybatis" class="headerlink" title="整合mybatis"></a>整合mybatis</h3><p><img src="C:\Users\Aoliao\AppData\Roaming\Typora\typora-user-images\image-20220401155359810.png" alt="image-20220401155359810"></p><h2 id="spring自动配置"><a href="#spring自动配置" class="headerlink" title="spring自动配置"></a>spring自动配置</h2><p>@Autowired （byType）</p><p>@Resource  （byName）</p><p>Condition</p><p>@Enable*注解</p><p>动态启用某些功能。底层原理使用@Import注解导入一些配置类，实现Bean动态加载</p><p>、</p><p>@ComponentScan（com.aoC.config）</p><p>@Import（userConfig.class）   加载类被spring创建放入Ioc容器。</p><p>@Enable*  自定义的注解。（@Target @Retention @Document @Import）</p><p>@Import</p><ol><li>导入Bean</li><li>导入配置类</li><li>导入ImportSelector（接口）实现类。加载配置文件的类</li><li>导入ImportBeanDefinitionRegistrar实现类</li></ol><p>@EnableAutoConfiguration</p><ul><li>@EnableAutoConfiguration注解内部使用@Import（AutoConfigurationImportSelector.class）来加载配置类</li><li>springBoot启动时会自动加载META-INF/spring.factories里的配置类，初始化Bean</li><li>配置类当中通过满足Condition条件的会被初始化Bean</li></ul><p>自定义starter</p><p>redis-starter</p><ol><li><p>新建两个moudle，一个是配置，一个是启动</p></li><li><p>配置（redis-AutoConfiguration）</p><ol><li><p>在配置引入jedis的依赖。新建一个配置类RedisAutoConfiguration，一个属性类RedisProperties</p></li><li><p>RedisAutoConfiguration具体</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line"></span><br><span class="line">//将RedisProperties注册Bean</span><br><span class="line">@EnableConfigurationProperties(RedisProperties.class)</span><br><span class="line"></span><br><span class="line">//Jedis在时在加载RedisAutoConfiguration</span><br><span class="line">@ConditionalOnClass(Jedis.class)</span><br><span class="line">public class RedisAutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    //如果用户自定义了jedis则不提供我们下面的bean</span><br><span class="line">    @ConditionalOnMissingBean(name = &quot;jedis&quot;)</span><br><span class="line">    public Jedis jedis(RedisProperties redisProperties)&#123;</span><br><span class="line">        return new Jedis(redisProperties.getHost(), redisProperties.getPort());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>RedisProperties具体</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//将下面的实体类和redis开头的配置文件绑定</span><br><span class="line">@ConfigurationProperties(prefix = &quot;redis&quot;)</span><br><span class="line">public class RedisProperties &#123;</span><br><span class="line">    private String host = &quot;localhost&quot;;</span><br><span class="line">    private int port = 6379;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>在resources下新建META-INF/spring-factories</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\表示换行</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  com.aoc.redisSpringBootAutoConfigura.RedisAutoConfiguration</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li>启动（redis-starter）<ol><li>引入上面自定义的配置</li></ol></li></ol><ol start="4"><li><p>其他模块使用自定义的redis-starter</p><ol><li><p>引入自定义的redis-starter</p></li><li><pre><code>        ConfigurableApplicationContext context = SpringApplication.run(Springboot01Application.class, args);        Jedis jedis = context.getBean(Jedis.class);        jedis.set(&quot;name&quot;,&quot;hahah&quot;);        String name = jedis.get(&quot;name&quot;);        System.out.println(name);</code></pre></li></ol></li></ol><h2 id="spring监听机制"><a href="#spring监听机制" class="headerlink" title="spring监听机制"></a>spring监听机制</h2><p>java的监听机制</p><p><img src="springBoot-02.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/Tyche-Ao/Tyche-Ao.github.io/2022/04/09/ssm/"/>
      <url>/Tyche-Ao/Tyche-Ao.github.io/2022/04/09/ssm/</url>
      
        <content type="html"><![CDATA[<p>导入依赖</p><ol><li>mybatis</li><li>mysql</li><li>c3p0</li><li>mybatis-spring</li></ol><ol start="5"><li>Servlet-api</li><li>jsp-api</li><li>jstl</li></ol><ol start="8"><li><p>spring-webmvc</p></li><li><p>spring-jdbc</p></li></ol><ol><li>spring-dao</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/context</span><br><span class="line">        https://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line">    &lt;!-- 配置整合mybatis --&gt;</span><br><span class="line">    &lt;!-- 1.关联数据库文件 --&gt;</span><br><span class="line">    &lt;context:property-placeholder location=&quot;classpath:database.properties&quot;/&gt;</span><br><span class="line">    &lt;!-- 2.数据库连接池 --&gt;</span><br><span class="line">    &lt;!--数据库连接池</span><br><span class="line">        dbcp  半自动化操作  不能自动连接</span><br><span class="line">        c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class="line">        &lt;!-- 配置连接池属性 --&gt;</span><br><span class="line">        &lt;property name=&quot;driverClass&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;jdbc.url&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;user&quot; value=&quot;$&#123;jdbc.username&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;/&gt;</span><br><span class="line">        &lt;!-- c3p0连接池的私有属性 --&gt;</span><br><span class="line">        &lt;property name=&quot;maxPoolSize&quot; value=&quot;30&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;minPoolSize&quot; value=&quot;10&quot;/&gt;</span><br><span class="line">        &lt;!-- 关闭连接后不自动commit --&gt;</span><br><span class="line">        &lt;property name=&quot;autoCommitOnClose&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;!-- 获取连接超时时间 --&gt;</span><br><span class="line">        &lt;property name=&quot;checkoutTimeout&quot; value=&quot;10000&quot;/&gt;</span><br><span class="line">        &lt;!-- 当获取连接失败重试次数 --&gt;</span><br><span class="line">        &lt;property name=&quot;acquireRetryAttempts&quot; value=&quot;2&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span><br><span class="line">    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;!-- 注入数据库连接池 --&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">        &lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span><br><span class="line">        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;</span><br><span class="line">    &lt;!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span><br><span class="line">    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">        &lt;!-- 注入sqlSessionFactory --&gt;</span><br><span class="line">        &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&gt;</span><br><span class="line">        &lt;!-- 给出需要扫描Dao接口包 --&gt;</span><br><span class="line">        &lt;property name=&quot;basePackage&quot; value=&quot;com.kuang.dao&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>spring-services</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">    http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">    http://www.springframework.org/schema/context</span><br><span class="line">    http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line">    &lt;!-- 扫描service相关的bean --&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;com.kuang.service&quot; /&gt;</span><br><span class="line">    &lt;!--BookServiceImpl注入到IOC容器中--&gt;</span><br><span class="line">    &lt;bean id=&quot;BookServiceImpl&quot; class=&quot;com.kuang.service.BookServiceImpl&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;bookMapper&quot; ref=&quot;bookMapper&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!-- 配置事务管理器 --&gt;</span><br><span class="line">    &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">        &lt;!-- 注入数据库连接池 --&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>web.xml</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br><span class="line">         version=&quot;4.0&quot;&gt;</span><br><span class="line">    &lt;!--DispatcherServlet--&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">            &lt;!--一定要注意:我们这里加载的是总的配置文件，之前被这里坑了！--&gt;   </span><br><span class="line">            &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line">    &lt;!--encodingFilter--&gt;</span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;</span><br><span class="line">        &lt;filter-class&gt;</span><br><span class="line">            org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">        &lt;/filter-class&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;utf-8&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">    &lt;/filter&gt;</span><br><span class="line">    &lt;filter-mapping&gt;</span><br><span class="line">        &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/filter-mapping&gt;</span><br><span class="line">    &lt;!--Session过期时间--&gt;</span><br><span class="line">    &lt;session-config&gt;</span><br><span class="line">        &lt;session-timeout&gt;15&lt;/session-timeout&gt;</span><br><span class="line">    &lt;/session-config&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><p>4.spring-mvc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">    http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">    http://www.springframework.org/schema/context</span><br><span class="line">    http://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="line">    http://www.springframework.org/schema/mvc</span><br><span class="line">    https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;</span><br><span class="line">    &lt;!-- 配置SpringMVC --&gt;</span><br><span class="line">    &lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span><br><span class="line">    &lt;mvc:annotation-driven /&gt;</span><br><span class="line">    &lt;!-- 2.静态资源默认servlet配置--&gt;</span><br><span class="line">    &lt;mvc:default-servlet-handler/&gt;</span><br><span class="line">    &lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span><br><span class="line">    &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!-- 4.扫描web相关的bean --&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;com.kuang.controller&quot; /&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>5.spring(applicationContext.xml)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line">    &lt;import resource=&quot;spring-dao.xml&quot;/&gt;</span><br><span class="line">    &lt;import resource=&quot;spring-service.xml&quot;/&gt;</span><br><span class="line">    &lt;import resource=&quot;spring-mvc.xml&quot;/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/Tyche-Ao/Tyche-Ao.github.io/2022/04/09/Spring/"/>
      <url>/Tyche-Ao/Tyche-Ao.github.io/2022/04/09/Spring/</url>
      
        <content type="html"><![CDATA[<p>控制层@Controller</p><p>业务层@Service</p><p>持久层@Repository    </p><p>自动装配</p><p>主导思想：约定优于配置</p><p>Aop（面向切面编程）</p><p>Ioc（控制反转）降低耦合</p><p>DI（依赖注入）</p><h1 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h1><p>导入依赖</p><ul><li>spring-webmvc</li><li>spring-jdbc</li></ul><p>实例化容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">   User user = (User) context.getBean(&quot;user&quot;);</span><br></pre></td></tr></table></figure><h1 id="IOC（控制反转）"><a href="#IOC（控制反转）" class="headerlink" title="IOC（控制反转）"></a>IOC（控制反转）</h1><p>IOC一种设计思想，DI是实现IOC的一种方法。由容器来控制对象之间的关系和生命周期，传统的开发模式在对象内部控制；  </p><p>何为反转 – –  传统应用程序自己在对象中主动控制去直接或去依赖对象。</p><p>​                          而反转则是通过容器来帮忙创建注入对象。</p><p>  IOC控制反转：说的是创建对象实例的控制权从代码控制剥离到IOC容器控制，实际就是在xml文件控制，侧重于原理</p><p>  DI依赖注入：说的是创建对象实例时，为这个对象注入属性值（赋值）或其他对象实例，侧重于实现。</p><p>优点：</p><ul><li>  解耦合（降低组件之间的耦合性）（高内聚，低耦合）</li><li>提高效率和产品质量</li><li>统一标准，提高模块的复用性</li></ul><h2 id="DI（依赖注入）"><a href="#DI（依赖注入）" class="headerlink" title="DI（依赖注入）"></a>DI（依赖注入）</h2><ul><li>依赖 : 指Bean对象的创建依赖于容器 . Bean对象的依赖资源 .</li><li>注入 : 指Bean对象所依赖的资源 , 由容器来设置和装配</li></ul><h3 id="有-参构造器注入"><a href="#有-参构造器注入" class="headerlink" title="有 参构造器注入"></a>有 参构造器注入</h3><p>construct-org</p><p>有参构照方法UserMapper(Strng name)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 第一种根据index参数下标设置 --&gt;</span><br><span class="line">&lt;bean id=&quot;userT&quot; class=&quot;com.kuang.pojo.UserT&quot;&gt;</span><br><span class="line">    &lt;!-- index指构造方法 , 下标从0开始，三种编写方式 --&gt;</span><br><span class="line">    &lt;constructor-arg index=&quot;0&quot; value=&quot;zhangsan&quot;/&gt;</span><br><span class="line">    &lt;constructor-arg name=&quot;name&quot; value=&quot;lisi&quot;/&gt;</span><br><span class="line">    &lt;constructor-arg type=&quot;java.lang.String&quot; value=&quot;kuangshen2&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>c:namespace</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">导入约束 : xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br><span class="line">&lt;!--C(构造: Constructor)命名空间 , 属性依然要设置set方法--&gt;</span><br><span class="line">&lt;bean id=&quot;user&quot; class=&quot;com.kuang.pojo.User&quot; c:name=&quot;狂神&quot; c:age=&quot;18&quot;/&gt;</span><br></pre></td></tr></table></figure><p>配置约束</p><h3 id="set注入"><a href="#set注入" class="headerlink" title="set注入"></a>set注入</h3><ul><li><p>普通对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;name&quot; value=&quot;小明&quot;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>引用对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;addr&quot; class=&quot;com.kuang.pojo.Address&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;address&quot; value=&quot;重庆&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id=&quot;student&quot; class=&quot;com.kuang.pojo.Student&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;name&quot; value=&quot;小明&quot;/&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!--引用对象用ref--&gt;</span><br><span class="line">    &lt;property name=&quot;address&quot; ref=&quot;addr&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><p>数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;books&quot;&gt;</span><br><span class="line">       &lt;array&gt;</span><br><span class="line">           &lt;value&gt;西游记&lt;/value&gt;</span><br><span class="line">           &lt;value&gt;红楼梦&lt;/value&gt;</span><br><span class="line">           &lt;value&gt;水浒传&lt;/value&gt;</span><br><span class="line">       &lt;/array&gt;</span><br><span class="line">   &lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li><p>list</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;list&gt;</span><br><span class="line">     &lt;value&gt;听歌&lt;/value&gt;</span><br><span class="line">     &lt;value&gt;看电影&lt;/value&gt;</span><br><span class="line">     &lt;value&gt;爬山&lt;/value&gt;</span><br><span class="line"> &lt;/list&gt;</span><br></pre></td></tr></table></figure></li><li><p>set</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;set&gt;</span><br><span class="line">    &lt;value&gt;LOL&lt;/value&gt;</span><br><span class="line">    &lt;value&gt;BOB&lt;/value&gt;</span><br><span class="line">    &lt;value&gt;COC&lt;/value&gt;</span><br><span class="line">&lt;/set&gt;</span><br></pre></td></tr></table></figure></li><li><p>map</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;map&gt;</span><br><span class="line">     &lt;entry key=&quot;中国邮政&quot; value=&quot;456456456465456&quot;/&gt;</span><br><span class="line">     &lt;entry key=&quot;建设&quot; value=&quot;1456682255511&quot;/&gt;</span><br><span class="line"> &lt;/map&gt;</span><br></pre></td></tr></table></figure></li><li><p>properties</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;props&gt;</span><br><span class="line">    &lt;prop key=&quot;学号&quot;&gt;20190604&lt;/prop&gt;</span><br><span class="line">    &lt;prop key=&quot;性别&quot;&gt;男&lt;/prop&gt;</span><br><span class="line">    &lt;prop key=&quot;姓名&quot;&gt;小明&lt;/prop&gt;</span><br><span class="line">&lt;/props&gt;</span><br></pre></td></tr></table></figure></li><li><p>null</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;wife&quot;&gt;&lt;null/&gt;&lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li><p>p:namespace</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    </span><br><span class="line">    //引入了P:namespace约束</span><br><span class="line">    xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">    http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;myDataSource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span><br><span class="line">        destroy-method=&quot;close&quot;</span><br><span class="line">        p:driverClassName=&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">        p:url=&quot;jdbc:mysql://localhost:3306/mydb&quot;</span><br><span class="line">        p:username=&quot;root&quot;</span><br><span class="line">        p:password=&quot;masterkaoli&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="bean作用域-scope"><a href="#bean作用域-scope" class="headerlink" title="bean作用域  scope"></a>bean作用域  scope</h4><p>alias别名  ==&gt;为bean 的id取别名。</p><h3 id="bean的自动装配"><a href="#bean的自动装配" class="headerlink" title="bean的自动装配"></a>bean的自动装配</h3><p>显示装配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;dog&quot; class=&quot;com.kuang.pojo.Dog&quot;/&gt;</span><br><span class="line">  &lt;bean id=&quot;cat&quot; class=&quot;com.kuang.pojo.Cat&quot;/&gt;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  &lt;bean id=&quot;user&quot; class=&quot;com.kuang.pojo.User&quot;&gt;</span><br><span class="line">      &lt;property name=&quot;cat&quot; ref=&quot;cat&quot;/&gt;</span><br><span class="line">      &lt;property name=&quot;dog&quot; ref=&quot;dog&quot;/&gt;</span><br><span class="line">      &lt;property name=&quot;str&quot; value=&quot;qinjiang&quot;/&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br></pre></td></tr></table></figure><ol><li><p>byName</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;user&quot; class=&quot;com.kuang.pojo.User&quot; autowire=&quot;byName&quot;&gt;</span><br><span class="line">&lt;!--这时cat和dog按照前面bean id--&gt;</span><br><span class="line">    &lt;property name=&quot;str&quot; value=&quot;qinjiang&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><p>byType</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;user&quot; class=&quot;com.kuang.pojo.User&quot; autowire=&quot;byType&quot;&gt;</span><br><span class="line">&lt;!--按照bean里的class装配--&gt;</span><br><span class="line">    &lt;property name=&quot;str&quot; value=&quot;qinjiang&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用注解装配</p><ol><li><p>引入约束并开启注解支持</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context</span><br><span class="line"></span><br><span class="line">http://www.springframework.org/schema/context</span><br><span class="line">http://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;context:annotation-config/&gt;</span><br></pre></td></tr></table></figure></li><li><p>在变量上使用@Autowired</p></li></ol></li></ol><h3 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h3><p>将类当中的对象名或类型与xml当中bean的id或class自动匹配。</p><p>＠Autowired   通过byType</p><p>@Resource    通过byName</p><p>@Coponent   组件，放在类上，代表该类被Spring管理了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--指定注解扫描包--&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;com.kuang.pojo&quot;/&gt;</span><br></pre></td></tr></table></figure><h4 id="完全用java"><a href="#完全用java" class="headerlink" title="完全用java"></a>完全用java</h4><p>不需要创建config.xml</p><p>@Configuration  代表这是一个配置类 ，类似于之前的xml配置文件</p><p>@ComponentScan  </p><p>@Bean  类似于之前的<bean id    class></p><p>用AnnotationConfigApplicationContext（类名.class）代替之前的ClassPathXmlApplicationContext来获取</p><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>代理模式</p><p>“为其他对象提供一种代理以控制对这个对象的访问”，简单点说就是，之前A类自己做一件事，在使用代理之后，A类不直接去做，而是由A类的代理类B来去做</p><ul><li>静态代理</li><li>jdk动态代理（基于接口）</li><li>cglib动态代理（基于类）</li></ul><p>AOP的原理 是使用<em><strong>JDK动态代理</strong></em>(代理接口)和<em><strong>cglib动态代理</strong></em>*（代理类）技术来实现的</p><p>1.JDK动态代理：通过实现InvocationHandlet接口，并重写里面的invoke方法，通过为proxy类指定classLoader和一组interfaces来创建动态代理</p><p>JDK实现动态代理需要实现类通过接口定义业务方法，对于没有接口的类，如何实现动态代理呢，这就需要cglib</p><h4 id="动态代理和静态代理的区别"><a href="#动态代理和静态代理的区别" class="headerlink" title="动态代理和静态代理的区别"></a>动态代理和静态代理的区别</h4><h5 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h5><p>代理类事先写死的。每一个抽象的事务都是一个接口，我们的代理类需要实现这个接口，即我们得为每一个服务都创建一个代理类，工作量太大，不易管理。而且，接口一旦发生改变，代理类也得同步进行相应的修改</p><h5 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h5><p>　　运用反射的机制。动态代理我们不需要再手动创建代理类，只需要编写一个动态代理处理器即可，真正的代理对象由JVM在运行时为我们动态的创建，这就是它之所以被称为动态代理的由来</p><h4 id="静态代理实现流程"><a href="#静态代理实现流程" class="headerlink" title="静态代理实现流程"></a>静态代理实现流程</h4><p>创建一个接口，然后创建被代理的类实现该接口并且实现该接口中的抽象方法。之后再创建一个代理类，同时使其也实现这个接口。在代理类中持有一个被代理对象的引用，而后在代理类方法中调用该对象的方法。</p><p><img src="C:\Users\Aoliao\AppData\Roaming\Typora\typora-user-images\image-20220327140326355.png" alt="image-20220327140326355"></p><h4 id="jdk动态代理实现"><a href="#jdk动态代理实现" class="headerlink" title="jdk动态代理实现"></a>jdk动态代理实现</h4><p>对比之前的静态代理。</p><p>静态代理：一个实现类对应一个代理类</p><p>Jdk动态代理：一个接口对应一个代理类。</p><p>1、通过实现InvocationHandlet接口创建自己的调用处理器</p><p>2、通过为Proxy类指定ClassLoader对象和一组interface来创建动态代理</p><p>3、通过反射机制获取动态代理类的构造函数，其唯一参数类型就是调用处理器接口类型</p><p>4、通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数参入</p><p>JDK动态代理是面向接口的代理模式，如果被代理目标没有接口那么Spring也无能为力，</p><p>Spring通过java的反射机制生产被代理接口的新的匿名实现类，重写了其中AOP的增强方法。</p><p>它是可以通过预编译方式和运行期动态代理实现在不修改源代码的情况下给程序动态统一添加功能的一种技术</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public class ProxyInvocationHandler implements InvocationHandler &#123;</span><br><span class="line"></span><br><span class="line">//静态代理这里是实现类，现在是代理接口。</span><br><span class="line">    private Rent rent;</span><br><span class="line">    public void setRent(Rent rent) &#123;</span><br><span class="line">        this.rent = rent;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    //生成代理类，重点是第二个参数，获取要代理的抽象角色！之前都是一个角色，现在可以代理一类角色</span><br><span class="line">    public Object getProxy()&#123;</span><br><span class="line">        return Proxy.newProxyInstance(this.getClass().getClassLoader(),</span><br><span class="line">                rent.getClass().getInterfaces(),this);</span><br><span class="line">    &#125;</span><br><span class="line">    // proxy : 代理类 method : 代理类的调用处理程序的方法对象.</span><br><span class="line">    // 处理代理实例上的方法调用并返回结果</span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">       // seeHouse();</span><br><span class="line">        //核心：本质利用反射实现！</span><br><span class="line">        Object result = method.invoke(rent, args);</span><br><span class="line">       // fare();</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  /*  </span><br><span class="line">    </span><br><span class="line">    //看房</span><br><span class="line">    public void seeHouse()&#123;</span><br><span class="line">        System.out.println(&quot;带房客看房&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //收中介费</span><br><span class="line">    public void fare()&#123;</span><br><span class="line">        System.out.println(&quot;收中介费&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开始AOP"><a href="#开始AOP" class="headerlink" title="开始AOP"></a>开始AOP</h3><p>AOP（Aspect Oriented Programming）意为：面向切面编程，通过<em><strong>预编译方式</strong></em>和运行期<em><strong>动态代理</strong></em>实现程序功能的统一维护的一种技术</p><ul><li><p>导入aspectjweaver</p></li><li><p>配置约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line"> http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line"> http://www.springframework.org/schema/aop</span><br><span class="line"> http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;</span><br></pre></td></tr></table></figure></li></ul><p><img src="spring_01.png" alt="横切逻辑"></p><p>第一种方式</p><p>这里的log和afterlog类实现了MethodBeforeAdvice，AfterReturningAdvice</p><p><img src="C:\Users\Aoliao\AppData\Roaming\Typora\typora-user-images\image-20220327233358016.png" alt="image-20220327233358016"></p><p>配置切入点和环绕方式</p><ul><li><img src="C:\Users\Aoliao\AppData\Roaming\Typora\typora-user-images\image-20220327232746144.png" alt="image-20220327232746144"></li></ul><p>第二种方式</p><p>自定义类，通过切面的方式</p><p><img src="C:\Users\Aoliao\AppData\Roaming\Typora\typora-user-images\image-20220327233312130.png" alt="image-20220327233312130"></p><p>第三种方式，使用注解</p><p><img src="C:\Users\Aoliao\AppData\Roaming\Typora\typora-user-images\image-20220327233846548.png" alt="image-20220327233846548"></p><p><img src="C:\Users\Aoliao\AppData\Roaming\Typora\typora-user-images\image-20220327233819427.png" alt="image-20220327233819427"></p><h2 id="java反射机制"><a href="#java反射机制" class="headerlink" title="java反射机制"></a>java反射机制</h2><h5 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h5><p>//表明使用的元素种类，ElementType枚举类  TYPE表示应用于类接口和枚举，Annotion类   METHOd 表方法</p><p>@Target({ElementType.TYPE,ElementType.METHOD})</p><p>//表明有效范围，  RetentionPolicy枚举类</p><p>@Retention(RetentionPolicy.RUNTIME)</p><p>@interface 注解名Anno{</p><p>//参数</p><p>​    String name() default “”;</p><p>Class type() default void.class;</p><p>​    String[] user() default {“qew”,”eee”};</p><p>}</p><h5 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h5><p>获得构造方法的注释</p><p>@Anno（name = “haha”, type = int.class , user={“das”,”cv”}）</p><p>Constructor 变量名cons；</p><p>//查看是否具有指定类型的注解</p><p>Boolean a = cons.isAnnotationPresent(Constructor_Annotation.class)</p><p>获得注解</p><p>Constructor_Annotation.class  ca = cons.getAnnotion(Constructor_Annotation.class);</p><p>ca.value()  //获得注解信息</p><p>获得变量Fileds的注释</p><p>获得方法Methods的注解</p><p>Class –字节码，用字节码对象获取构造器Constructor，新建对象newInstance（），调用属性和方法。</p><h5 id="forName（）"><a href="#forName（）" class="headerlink" title="forName（）"></a>forName（）</h5><p>用无参构造实例化</p><p>全限定类名  ： package.类名</p><p>Class 变量名a = Class.forName(“包名.类名”)</p><p>Object 变量名 = a.newInstance（）  相当于Object 变量名 = new Object（）；</p><h5 id="getClass（）"><a href="#getClass（）" class="headerlink" title="getClass（）"></a>getClass（）</h5><p>可以指定构造来实例化</p><p>有一个类A</p><p>Class A{}</p><p> A 变量名a；</p><p>Class 变量名b = a.getClass();</p><p>可通过b来访问a对象的描述信息；</p><p>Constructor 变量c = b.getConstructor(String.class, int.class)</p><p>A 变量名 = c.newInstance()</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/Tyche-Ao/Tyche-Ao.github.io/2022/04/07/mybatis/"/>
      <url>/Tyche-Ao/Tyche-Ao.github.io/2022/04/07/mybatis/</url>
      
        <content type="html"><![CDATA[<p>持久层框架</p><p>Dao层</p><p>Service层（业务处理）</p><p>Controller层（用户请求）</p><h2 id="数据库mysql-基础语句"><a href="#数据库mysql-基础语句" class="headerlink" title="数据库mysql 基础语句"></a><strong>数据库mysql 基础语句</strong></h2><p>distinct（mysql返回不同的数据）</p><p>如select distinct ID from 表名 limit 5,5；</p><p>limit  5,5（表示从第五行开始的5行）</p><p>order by  price DESC？ASC    (降序和升序，默认升序)</p><p>where ID=1 and  price=10</p><p>where          or</p><p>where ID in（7，,8）</p><p>where ID not in（7,8）</p><h6 id="like和regexp"><a href="#like和regexp" class="headerlink" title="like和regexp"></a><em><strong>like和regexp</strong></em></h6><p>like ‘%<em>陈</em>%’</p><p>like ‘陈_’</p><p>_只匹配一个字符 ，%通配符匹配多个字符。</p><p>REGEXP（正则表达式）</p><p>regexp ‘.000’    .表示任意一位字符</p><p>like和regexp的区别：</p><p>表中有一条数据id=10，like ‘10’  不返回数据，没有使用通配符。</p><p>regexp ‘10’   会返回数据。</p><p>regexp ‘12 | 23’  匹配带有12或23的</p><p>regexp ‘[123] chen’   匹配带有1或2或3 chen</p><p>[a-z]         \-表示- </p><p>group by ID having price &gt;10</p><h6 id="子查询（嵌套）"><a href="#子查询（嵌套）" class="headerlink" title="子查询（嵌套）"></a>子查询（嵌套）</h6><p>select ID from 表1 where num in（</p><p>select  num from 表2 where pid =‘3’</p><p>）；</p><h6 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h6><p>select 表1.ID ， 表2.num</p><p>from 表1， 表2</p><p>where 表1.pid = 表2.pid</p><p>from 表1 as c   用c代替表1</p><p>内部联结</p><p>select 表1.id ， 表2.num</p><p>from 表1 INNER JOIN 表2</p><p>ON 表1.pid =表2.pid</p><p>外部（Left OUTER join）</p><p>插入INSERT</p><p>insert into 表名 （字段名，···） </p><p>values（插入值，···），</p><p>（多个插入值，···）；</p><p>更新update</p><p>UPDATE 表名 </p><p>SET id= 1</p><p>where num=100</p><p>删除delete</p><p>delete 表名 where 条件；</p><h1 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ol><li><p>持久层框架</p></li><li><p>用XML或注解配置映射信息，将接口和实体类映射成数据库中的记录</p></li></ol><h3 id="mybatis项目主要流程"><a href="#mybatis项目主要流程" class="headerlink" title="mybatis项目主要流程"></a>mybatis项目主要流程</h3><ol><li>导入依赖<ol><li>mybatis</li><li>mysql-connect-java</li><li>junit</li></ol></li></ol><ol start="2"><li><p>编写mybatis核心配置文件</p><p>mybatis-config.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">  PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">  &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">  </span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">    &lt;!--事务管理器--&gt;</span><br><span class="line">      &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;</span><br><span class="line">      &lt;/dataSource&gt;</span><br><span class="line">      </span><br><span class="line">    &lt;/environment&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;/environments&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;mappers&gt;</span><br><span class="line">    &lt;mapper resource=&quot;org/mybatis/example/BlogMapper.xml&quot;/&gt;</span><br><span class="line">  &lt;/mappers&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li></ol><p>数据源dataSources可以提出写在工具类当中</p><ol start="3"><li><p>获取session</p><ol><li><p>获取sqlSessionFactory</p><p>通过SqlSessionFactoryBuilder（）.build()获取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String resource = &quot;org/mybatis/example/mybatis-config.xml&quot;;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure></li><li><p>获取sqlSession</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SqlSession session = sqlSessionFactory.openSession()</span><br></pre></td></tr></table></figure></li><li><p>获取mapper</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">User user = mapper.selectUserById(101);</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>maven 约定大于配置，可能会出现。写的配置文件，无法导出或生效。``</p><ol start="4"><li>静态资源过滤</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;resource&gt;</span><br><span class="line">        &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">        &lt;includes&gt;</span><br><span class="line">            &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">            &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">        &lt;/includes&gt;</span><br><span class="line">        &lt;filtering&gt;false&lt;/filtering&gt;</span><br><span class="line">    &lt;/resource&gt;</span><br><span class="line">    &lt;resource&gt;</span><br><span class="line">        &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">        &lt;includes&gt;</span><br><span class="line">            &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">            &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">        &lt;/includes&gt;</span><br><span class="line">        &lt;filtering&gt;false&lt;/filtering&gt;</span><br><span class="line">    &lt;/resource&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure><h3 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h3><img src="/Tyche-Ao/Tyche-Ao.github.io/2022/04/07/mybatis/01.png" class="" title="xml配置结构"><ol><li><p>事务管理器 transactionManager</p><ol><li>JDBC   使用JDBC的提交和回滚</li><li>MANAGED   不提交或回滚，容器管理事务的整个生命周期</li></ol></li><li><p>数据源dataSource</p><ol><li>UNPOOLED</li><li>POOLED   :  利用“池”，减少了初始化和认证的时间</li><li>JNDI</li></ol></li></ol><h3 id="映射器mappers"><a href="#映射器mappers" class="headerlink" title="映射器mappers"></a>映射器mappers</h3><ol><li><p>```</p><!-- 使用相对于类路径的资源引用 --><mappers>  <mapper resource="org/mybatis/builder/PostMapper.xml"/></mappers><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. ```</span><br><span class="line">   &lt;!-- 使用完全限定资源定位符（URL） --&gt;</span><br><span class="line">   &lt;mappers&gt;</span><br><span class="line">     &lt;mapper url=&quot;file:///var/mappers/AuthorMapper.xml&quot;/&gt;</span><br><span class="line">   &lt;/mappers&gt;</span><br></pre></td></tr></table></figure></li><li><p>```</p><!-- 使用映射器接口实现类的完全限定类名需要配置文件名称和接口名称一致，并且位于同一目录下--><mappers>  <mapper class="org.mybatis.builder.AuthorMapper"/></mappers><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. ```</span><br><span class="line">   &lt;!-- </span><br><span class="line">   将包内的映射器接口实现全部注册为映射器</span><br><span class="line">   但是需要配置文件名称和接口名称一致，并且位于同一目录下</span><br><span class="line">   --&gt;</span><br><span class="line">   &lt;mappers&gt;</span><br><span class="line">     &lt;package name=&quot;org.mybatis.builder&quot;/&gt;</span><br><span class="line">   &lt;/mappers&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="typeAliases别名"><a href="#typeAliases别名" class="headerlink" title="typeAliases别名"></a>typeAliases别名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置别名,注意顺序--&gt;</span><br><span class="line">&lt;typeAliases&gt;</span><br><span class="line">    &lt;typeAlias type=&quot;com.kuang.pojo.User&quot; alias=&quot;User&quot;/&gt;</span><br><span class="line">&lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure><p>注解 @Alias（“”）</p><h3 id="setting"><a href="#setting" class="headerlink" title="setting"></a>setting</h3><ol><li>logImpl 指定日志<ol><li>LOG4J</li><li>STDOUT_LOGGING</li></ol></li></ol><h3 id="类型处理器typeHandlers"><a href="#类型处理器typeHandlers" class="headerlink" title="类型处理器typeHandlers"></a>类型处理器typeHandlers</h3><p>MyBatis 在设置预处理语句（PreparedStatement）中的参数或从结果集中取出一个值时， 都会用类型处理器将获取到的值以合适的方式转换成 Java 类型</p><h3 id="对象工厂objectFactory"><a href="#对象工厂objectFactory" class="headerlink" title="对象工厂objectFactory"></a>对象工厂objectFactory</h3><p>每次 MyBatis 创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成实例化工作。 默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认无参构造方法，要么通过存在的参数映射来调用带有参数的构造方法。 如果想覆盖对象工厂的默认行为，可以通过创建自己的对象工厂来实现。</p><h3 id="作用域和生命周期"><a href="#作用域和生命周期" class="headerlink" title="作用域和生命周期"></a>作用域和生命周期</h3><ol><li><p><strong>SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域</strong>（也就是局部方法变量）</p></li><li><p><strong>SqlSessionFactory 的最佳作用域是应用作用域。</strong></p></li><li><p><strong>SqlSession 的最佳的作用域是请求或方法作用域</strong></p><p>如果说 SqlSessionFactory 相当于数据库连接池，那么 SqlSession 就相当于一个数据库连接（Connection 对象）</p></li></ol><h2 id="结果集映射ResultMap"><a href="#结果集映射ResultMap" class="headerlink" title="结果集映射ResultMap"></a>结果集映射ResultMap</h2><ol><li><pre><code>&lt;resultMap id=&quot;UserMap&quot; type=&quot;User&quot;&gt;    &lt;!-- id为主键 --&gt;    &lt;id column=&quot;id&quot; property=&quot;id&quot;/&gt;    &lt;!-- column是数据库表的列名 , property是对应实体类的属性名 --&gt;    &lt;result column=&quot;name&quot; property=&quot;name&quot;/&gt;    &lt;result column=&quot;pwd&quot; property=&quot;password&quot;/&gt;&lt;/resultMap&gt;&lt;select id=&quot;selectUserById&quot; resultMap=&quot;UserMap&quot;&gt;    select id , name , pwd from user where id = #&#123;id&#125;&lt;/select&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 多对一处理 </span><br><span class="line"></span><br><span class="line">   1. 按查询结果嵌套处理</span><br><span class="line"></span><br><span class="line">      多个学生对应一个老师。</span><br><span class="line"></span><br><span class="line">      学生表：id ，name， tid</span><br><span class="line"></span><br><span class="line">      老师表： id ，name</span><br><span class="line"></span><br><span class="line">      pojo实体类：</span><br><span class="line"></span><br><span class="line">      Student：id ， name  ，teacher（为Teacher类）</span><br><span class="line"></span><br><span class="line">      Teacher： id， name</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"></span><br></pre></td></tr></table></figure>     &lt;select id=&quot;getStudents&quot; resultMap=&quot;StudentTeacher&quot;&gt;         select * from student       &lt;/select&gt;       &lt;resultMap id=&quot;StudentTeacher&quot; type=&quot;Student&quot;&gt;           &lt;!--association关联属性  property属性名 javaType属性类型 column在多的一方的表中的列名--&gt;           &lt;association property=&quot;teacher&quot;  column=&quot;tid&quot; javaType=&quot;Teacher&quot; select=&quot;getTeacher&quot;/&gt;       &lt;/resultMap&gt;              &lt;!--         &lt;association property=&quot;author&quot; javaType=&quot;Author&quot;&gt;       &lt;id property=&quot;id&quot; column=&quot;author_id&quot;/&gt;       &lt;result property=&quot;username&quot; column=&quot;author_username&quot;/&gt;       &lt;/association&gt;       --&gt;              &lt;select id=&quot;getTeacher&quot; resultType=&quot;teacher&quot;&gt;           select * from teacher where id = #&#123;id&#125;       &lt;/select&gt;   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 按结果嵌套查询</span><br><span class="line"></span><br></pre></td></tr></table></figure>      &lt;!--      按查询结果嵌套处理      思路：          1. 直接查询出结果，进行结果集的映射      --&gt;      &lt;select id=&quot;getStudents2&quot; resultMap=&quot;StudentTeacher2&quot; &gt;          select s.id sid, s.name sname , t.name tname          from student s,teacher t          where s.tid = t.id      &lt;/select&gt;      &lt;resultMap id=&quot;StudentTeacher2&quot; type=&quot;Student&quot;&gt;          &lt;id property=&quot;id&quot; column=&quot;sid&quot;/&gt;          &lt;result property=&quot;name&quot; column=&quot;sname&quot;/&gt;          &lt;!--关联对象property 关联对象在Student实体类中的属性--&gt;          &lt;association property=&quot;teacher&quot; javaType=&quot;Teacher&quot;&gt;              &lt;result property=&quot;name&quot; column=&quot;tname&quot;/&gt;          &lt;/association&gt;      &lt;/resultMap&gt;      <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">         </span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">3. 一对多处理</span><br><span class="line"></span><br><span class="line">   一个老师有多个学生。</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   1. 按查询结果嵌套</span><br><span class="line"></span><br></pre></td></tr></table></figure>   &lt;select id=&quot;getTeacher2&quot; resultMap=&quot;TeacherStudent2&quot;&gt;     select * from teacher where id = #&#123;id&#125;   &lt;/select&gt;   &lt;resultMap id=&quot;TeacherStudent2&quot; type=&quot;Teacher&quot;&gt;       &lt;!--column是一对多的外键 , 写的是一的主键的列名--&gt;       &lt;collection property=&quot;students&quot; javaType=&quot;ArrayList&quot; ofType=&quot;Student&quot; column=&quot;id&quot; select=&quot;getStudentByTeacherId&quot;/&gt;   &lt;/resultMap&gt;   &lt;select id=&quot;getStudentByTeacherId&quot; resultType=&quot;Student&quot;&gt;       select * from student where tid = #&#123;id&#125;   &lt;/select&gt;   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">2. 按结果查询</span><br><span class="line"></span><br></pre></td></tr></table></figure>           1. 集合的话，使用collection！                   JavaType和ofType都是用来指定对象类型的                   JavaType是用来指定pojo中属性的类型                   ofType指定的是映射到list集合属性中pojo的类型。       --&gt;       &lt;select id=&quot;getTeacher&quot; resultMap=&quot;TeacherStudent&quot;&gt;           select s.id sid, s.name sname , t.name tname, t.id tid           from student s,teacher t           where s.tid = t.id and t.id=#&#123;id&#125;       &lt;/select&gt;       &lt;resultMap id=&quot;TeacherStudent&quot; type=&quot;Teacher&quot;&gt;           &lt;result  property=&quot;name&quot; column=&quot;tname&quot;/&gt;           &lt;collection property=&quot;students&quot; ofType=&quot;Student&quot;&gt;               &lt;result property=&quot;id&quot; column=&quot;sid&quot; /&gt;               &lt;result property=&quot;name&quot; column=&quot;sname&quot; /&gt;               &lt;result property=&quot;tid&quot; column=&quot;tid&quot; /&gt;           &lt;/collection&gt;       &lt;/resultMap&gt;   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">ssm系统架构，执行流程</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">控制层/表现层（Controller）  SpringMVC     （表单校验，控制跳转，调用服务，异常处理）</span><br><span class="line"></span><br><span class="line">业务层（Services）          （校验查询条件，调用Mapper层，业务逻辑处理，数据封装）</span><br><span class="line"></span><br><span class="line">持久层（Mapper/Dao）  mybatis （持久化数据，对数据库操作，连接数据库）</span><br><span class="line"></span><br><span class="line">mysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pojo（实体类要重写toString（）方法） utils（工具）</span><br><span class="line"></span><br><span class="line">1、配置mybatis环境（导入几个依赖 dependencies       mybatis ，junit ，mysql）     在pom.xml</span><br><span class="line"></span><br><span class="line">2、新建一个module(单元/模块)   共用父工程的环境</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、编写核心配置文件resources目录下mybatis-config.xml 连接数据库的操作</span><br><span class="line"></span><br><span class="line">（类似于JDBC 用connection、Statement、 resultSet 、ManagerDriver</span><br><span class="line"></span><br><span class="line">com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line">&quot;jdbc:mysql://127.0.0.1:3306/数据库名?useSSL=&quot;true&quot;&amp;amp;useUnicode=&quot;true&quot;&amp;amp;characterEncoding=UTF-8&quot;</span><br><span class="line"></span><br><span class="line">）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、编写工具类放在com.aoC.utils下   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通过SqlSessionFactoryBuilder.build（） 来获取SqlSessionFactory</span><br><span class="line"></span><br><span class="line">再通过SqlSessionFactory . openSession（）来获取SqlSession</span><br><span class="line"></span><br><span class="line">在使用SqlSession变量 . getMapper（Mapperle i. class）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、在com.aoC.Mapper目录下 写mapper接口he对应的xml文件</span><br><span class="line"></span><br><span class="line">对数据库增删改查操作。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">增删改  必须要提交事务。commit</span><br><span class="line"></span><br><span class="line">setAutoCommit(false) 同志数据库开启事务，false表示开启</span><br><span class="line"></span><br><span class="line">SqlSession.commit()  提交事务</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mybatis默认的事务管理器JDBC，连接池pooled</span><br><span class="line"></span><br><span class="line">2、properties（属性）</span><br><span class="line"></span><br><span class="line">引入外部配置文件简化数据库连接配置文件</span><br><span class="line"></span><br><span class="line">&lt;properties resources=&quot;配置文件地址&quot;&gt;&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">UUID</span><br><span class="line"></span><br><span class="line">UUID.randomUUID().toString().replaceAll(&quot;-&quot;,&quot;.&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 动态sql</span><br><span class="line"></span><br><span class="line">1. if</span><br><span class="line"></span><br></pre></td></tr></table></figure>&lt;select id=&quot;queryBlogIf&quot; parameterType=&quot;map&quot; resultType=&quot;blog&quot;&gt;    select * from blog     &lt;where&gt;        &lt;if test=&quot;title != null&quot;&gt;            title = #&#123;title&#125;        &lt;/if&gt;        &lt;if test=&quot;author != null&quot;&gt;            and author = #&#123;author&#125;        &lt;/if&gt;    &lt;/where&gt;&lt;/select&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">2. choose(when,otherwise)</span><br><span class="line"></span><br><span class="line">   类似于switch （case，default）</span><br><span class="line"></span><br></pre></td></tr></table></figure>&lt;select id=&quot;findActiveBlogLike&quot;     resultType=&quot;Blog&quot;&gt;  SELECT * FROM BLOG WHERE state = ‘ACTIVE’  &lt;choose&gt;    &lt;when test=&quot;title != null&quot;&gt;      AND title like #&#123;title&#125;    &lt;/when&gt;    &lt;when test=&quot;author != null and author.name != null&quot;&gt;      AND author_name like #&#123;author.name&#125;    &lt;/when&gt;    &lt;otherwise&gt;      AND featured = 1    &lt;/otherwise&gt;  &lt;/choose&gt;&lt;/select&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">3. trim(where,set)</span><br><span class="line"></span><br></pre></td></tr></table></figure>&lt;update id=&quot;updateAuthorIfNecessary&quot;&gt;  update Author    &lt;set&gt;      &lt;if test=&quot;username != null&quot;&gt;username=#&#123;username&#125;,&lt;/if&gt;      &lt;if test=&quot;password != null&quot;&gt;password=#&#123;password&#125;,&lt;/if&gt;      &lt;if test=&quot;email != null&quot;&gt;email=#&#123;email&#125;,&lt;/if&gt;      &lt;if test=&quot;bio != null&quot;&gt;bio=#&#123;bio&#125;&lt;/if&gt;    &lt;/set&gt;  where id=#&#123;id&#125;&lt;/update&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">4. foreach</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br></pre></td></tr></table></figure>&lt;select id=&quot;selectPostIn&quot; resultType=&quot;domain.blog.Post&quot;&gt;  SELECT *  FROM POST P  &lt;where&gt;    &lt;foreach item=&quot;item&quot; index=&quot;index&quot; collection=&quot;list&quot;        open=&quot;ID in (&quot; separator=&quot;,&quot; close=&quot;)&quot; nullable=&quot;true&quot;&gt;          #&#123;item&#125;    &lt;/foreach&gt;  &lt;/where&gt;&lt;select id=&quot;queryBlogForeach&quot; parameterType=&quot;map&quot; resultType=&quot;blog&quot;&gt;    select * from blog    &lt;where&gt;        &lt;!--        collection:指定输入对象中的集合属性        item:每次遍历生成的对象        open:开始遍历时的拼接字符串        close:结束时拼接的字符串        separator:遍历对象之间需要拼接的字符串        select * from blog where 1=1 and (id=1 or id=2 or id=3)      --&gt;        &lt;foreach collection=&quot;ids&quot;  item=&quot;id&quot; open=&quot;and (&quot; close=&quot;)&quot; separator=&quot;or&quot;&gt;            id=#&#123;id&#125;        &lt;/foreach&gt;    &lt;/where&gt;&lt;/select&gt;&lt;/select&gt;</code></pre></li></ol><p>正常sql语句where后直接跟and不行</p><p>用标签<where>&lt;/&gt;  直接跟and语句会将and自动去除</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test05</title>
      <link href="/Tyche-Ao/Tyche-Ao.github.io/2022/04/07/test05/"/>
      <url>/Tyche-Ao/Tyche-Ao.github.io/2022/04/07/test05/</url>
      
        <content type="html"><![CDATA[<img src="/Tyche-Ao/Tyche-Ao.github.io/2022/04/07/test05/02.png" class="" title="最后一次">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test03</title>
      <link href="/Tyche-Ao/Tyche-Ao.github.io/2022/04/07/test03/"/>
      <url>/Tyche-Ao/Tyche-Ao.github.io/2022/04/07/test03/</url>
      
        <content type="html"><![CDATA[<img src="/Tyche-Ao/Tyche-Ao.github.io/2022/04/07/test03/02.png" class="" title="测试3">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test02</title>
      <link href="/Tyche-Ao/Tyche-Ao.github.io/2022/04/07/test02/"/>
      <url>/Tyche-Ao/Tyche-Ao.github.io/2022/04/07/test02/</url>
      
        <content type="html"><![CDATA[<img src="/Tyche-Ao/Tyche-Ao.github.io/2022/04/07/test02/02.png" class="" title="测试">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/Tyche-Ao/Tyche-Ao.github.io/2022/04/07/test/"/>
      <url>/Tyche-Ao/Tyche-Ao.github.io/2022/04/07/test/</url>
      
        <content type="html"><![CDATA[<img src="/Tyche-Ao/Tyche-Ao.github.io/2022/04/07/test/01.png" class="" title="test">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>markdown基本语法</title>
      <link href="/Tyche-Ao/Tyche-Ao.github.io/2022/04/07/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/Tyche-Ao/Tyche-Ao.github.io/2022/04/07/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>#后面跟空格跟标题名。几个#表示几级标题</p><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><hr><hr><p>*** 或者-–表示分割线</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>&gt; 表示引用，可有多级（多个&gt;）</p><blockquote><p>一级引用</p><blockquote><blockquote><p>二级引用</p></blockquote></blockquote></blockquote><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>无序列表： 使用 - 或+ 或*</p><p>有序列表： 数字加点空格</p><ul><li></li><li></li></ul><ol><li></li><li></li></ol><p><em><strong>cuti</strong></em></p><h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><ol><li>*我是斜体   *            <em>斜体</em></li><li>** 我是粗体**           <strong>粗体</strong></li><li>***粗体加斜体***      <em><strong>粗体加斜体</strong></em></li><li>~~删除线~~            <del>删除线</del></li></ol><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>英文     ! + [描述]+(连接url)</p><p><img src="https://i0.hdslb.com/bfs/archive/ca375eb31fa90b8e23b88ed3433c2f60de1c2e6e.png" alt="描述"></p><h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><p>[描述] + (连接url)</p><p><a href="https://www.bilibili.com/">bilibili</a></p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>ctrl + t</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>``</p><p>高亮代码</p><p>``</p><p>```</p><p>代码块</p><p>```</p><h1 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h1><p>&infin;</p><p>&frac12;</p><img src="/Tyche-Ao/Tyche-Ao.github.io/2022/04/07/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/01.png" class="" title="特殊符号">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/Tyche-Ao/Tyche-Ao.github.io/2022/04/03/hello-world/"/>
      <url>/Tyche-Ao/Tyche-Ao.github.io/2022/04/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
